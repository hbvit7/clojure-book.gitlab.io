; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+o o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Connecting ...
; No nrepl port file found.
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉user꞉>  ; Use `alt+enter` to evaluate
nil
clj꞉user꞉> 
true
clj꞉user꞉> 
42
clj꞉user꞉> 
; Evaluating file: calc_lib_partial_test.clj
#'user/calc_lib_test
clj꞉user꞉> 
; Evaluating file: calc_lib_partial_test.clj
#'user/calc_lib_test
clj꞉user꞉> 
; nREPL Connection was closed
; Connecting ...
; No nrepl port file found.
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉user꞉> 
; Evaluating file: calc_lib_partial_test.clj
nil
clj꞉user꞉> 
4
clj꞉user꞉> 
; Syntax error reading source at (REPL:5:18).
; Unmatched delimiter: ]
clj꞉user꞉> 
4
clj꞉user꞉> 
4
clj꞉user꞉> 
4
clj꞉user꞉> 
nil
clj꞉user꞉> 
nil
clj꞉user꞉> 
(1 2 3 4)
clj꞉user꞉> 
(1 2 3 4)
clj꞉user꞉> 
(1 4 3 2)
clj꞉user꞉> 
([:one 1] [:two 2] [:three 3] [:four 4])
clj꞉user꞉> 
clojure.lang.PersistentList
clj꞉user꞉> 
clojure.lang.PersistentVector$ChunkedSeq
clj꞉user꞉> 
clojure.lang.APersistentMap$KeySeq
clj꞉user꞉> 
clojure.lang.PersistentArrayMap$Seq
clj꞉user꞉> 
nil
clj꞉user꞉> 
nil
clj꞉user꞉> 
nil
clj꞉user꞉> 
nil
clj꞉user꞉> 
(1 2 3 4)
clj꞉user꞉> 
4
clj꞉user꞉> 
(1 2 3 4)
clj꞉user꞉> 
4
clj꞉user꞉> 
(1 4 3 2)
clj꞉user꞉> 
4
clj꞉user꞉> 
([:one 1] [:two 2] [:three 3] [:four 4])
clj꞉user꞉> 
([:one 1] [:two 2] [:three 3] [:four 4])
clj꞉user꞉> 
4
clj꞉user꞉> 
; Execution error (ArityException) at user/eval2116 (REPL:21).
; Wrong number of args (3) passed to: clojure.lang.PersistentVector
clj꞉user꞉> 
4
clj꞉user꞉> 
; Syntax error compiling def at (lazy_sequence_iterate.clj:9:1).
; Too many arguments to def
clj꞉user꞉> 
; Syntax error (IllegalArgumentException) compiling . at (lazy_sequence_iterate.clj:10:3).
; No matching method pow found taking 1 args for class java.lang.Math
clj꞉user꞉> 
#'user/squared
clj꞉user꞉> 
(squared 3)
9.0
clj꞉user꞉> 
#'user/all-squares
clj꞉user꞉> 
; Error printing return value (IllegalArgumentException) at clojure.lang.RT/seqFrom (RT.java:557).
; Don't know how to create ISeq from: java.lang.Double
clj꞉user꞉> 
; Syntax error macroexpanding clojure.core/defn at (lazy_sequence_iterate.clj:12:1).
; squared - failed: vector? at: [:fn-tail :arity-n :bodies :params] spec: :clojure.core.specs.alpha/param-list
; (squared 5) - failed: vector? at: [:fn-tail :arity-1 :params] spec: :clojure.core.specs.alpha/param-list
clj꞉user꞉> 
#'user/all-squares
clj꞉user꞉> 
(5 25.0 625.0)
clj꞉user꞉> 
#'user/multiply-by-5
clj꞉user꞉> 
('user/multiply-by-5 10)
nil
clj꞉user꞉> 
#'user/multiply-by-5
clj꞉user꞉> 
nil
clj꞉user꞉> 
(multiply-by-5 10)
50
clj꞉user꞉> 
#'user/multiples-of-5
clj꞉user꞉> 
(5 25 125 625 3125)
clj꞉user꞉> 
#'user/squared
clj꞉user꞉> 
#'user/squares
clj꞉user꞉> 
(5 25.0 625.0)
clj꞉user꞉> 
